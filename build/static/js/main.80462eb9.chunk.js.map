{"version":3,"sources":["pages/pdfPage.jsx","pages/homePage.jsx","App.js","serviceWorker.js","index.js"],"names":["PdfPage","style","width","height","position","marginTop","title","src","HomePage","instance","axios","create","baseURL","timeout","headers","App","className","display","background","top","listStyleType","margin","to","pathname","state","pageName","onClick","alert","get","responseType","then","response","console","log","pdfData","data","blob","Blob","type","navigator","appVersion","toString","indexOf","window","msSaveBlob","a","document","createElement","blobUrl","URL","createObjectURL","body","appendChild","href","download","click","catch","error","finally","path","component","Boolean","location","hostname","match","ReactDOM","render","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"gQAeeA,EAbC,WACZ,OAAQ,yBAAKC,MAAO,CAAEC,MAAO,QAASC,OAAQ,qBAAsBC,SAAU,WAAYC,UAAW,SAA7F,WAEH,4BACGJ,MAAO,CAAEC,MAAO,OAAQC,OAAQ,QAChCG,MAAM,WACNC,IAAI,+FCFDC,EAJE,WACb,OAAO,4C,QCILC,E,OAAWC,EAAMC,OAAO,CAC5BC,QAAS,GACTC,QAAS,IACTC,QAAS,CAAE,kBAAmB,YAwFjBC,MArFf,WAyCE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,aAAaf,MAAO,CAAEgB,QAAS,OAAQd,OAAQ,OAAQe,WAAY,SAAUd,SAAU,QAASe,IAAK,MACrH,wBAAIlB,MAAO,CACTgB,QAAS,OACTG,cAAe,SAEf,wBAAInB,MAAO,CACToB,OAAQ,cAER,kBAAC,IAAD,CACEC,GAAI,CACFC,SAAU,QACVC,MAAO,CAAEC,SAAU,eAHvB,SAMF,wBAAIxB,MAAO,CACToB,OAAQ,cAER,kBAAC,IAAD,CACEC,GAAI,CACFC,SAAU,OACVC,MAAO,CAAEC,SAAU,aAHvB,QAMF,wBAAIxB,MAAO,CACToB,OAAQ,cAER,4BAAQK,QAnEE,WAClBC,MAAM,mBACNlB,EAASmB,IAAI,oBAAqB,CAAEC,aAAc,gBAC/CC,MAAK,SAAUC,GAEdC,QAAQC,IAAIF,GACZ,IAAMG,EAAUH,EAASI,KACzBH,QAAQC,IAAIC,GAEZ,IAAME,EAAO,IAAIC,KAAK,CAACH,GAAU,CAAEI,KAAM,oBAIzC,GAAIC,UAAUC,WAAWC,WAAWC,QAAQ,QAAU,EAEpDC,OAAOJ,UAAUK,WAAWR,EAJb,kBAKV,CAEL,IAAIS,EAAIC,SAASC,cAAc,KAC3BC,EAAUL,OAAOM,IAAIC,gBAAgBd,GACzCU,SAASK,KAAKC,YAAYP,GAC1BA,EAAE5C,MAAQ,gBACV4C,EAAEQ,KAAOL,EACTH,EAAES,SAZa,aAafT,EAAEU,YAMLC,OAAM,SAAUC,GAEfzB,QAAQC,IAAIwB,MAEbC,SAAQ,iBAiCH,mBAMN,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,QAAQC,UAAWpD,IAC/B,kBAAC,IAAD,CAAOmD,KAAK,OAAOC,UAAW5D,OC9ElB6D,QACW,cAA7BlB,OAAOmB,SAASC,UAEe,UAA7BpB,OAAOmB,SAASC,UAEhBpB,OAAOmB,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,IAAD,KAAQ,kBAAC,EAAD,OAAkBpB,SAASqB,eAAe,SD0H5D,kBAAmB5B,WACrBA,UAAU6B,cAAcC,MAAMvC,MAAK,SAAAwC,GACjCA,EAAaC,kB","file":"static/js/main.80462eb9.chunk.js","sourcesContent":["import React from 'react';\n\nconst PdfPage = () => {\n    return (<div style={{ width: '100vw', height: 'calc(100vh - 70px)', position: 'relative', marginTop: '70px' }}>\n        PDF Page\n        {<iframe\n            style={{ width: '100%', height: '100%' }}\n            title=\"PDF View\"\n            src='pdfPlayer/mobile-viewer/viewer.html?pdfUrl=/pdfPlayer/compressed.tracemonkey-pldi-09.pdf' />}\n\n        {/*<iframe style={{width: '100%',height: '100%'}} title=\"PDF View\" src='pdfPlayer/compressed.tracemonkey-pldi-09.pdf'/>*/}\n\n    </div>)\n}\n\nexport default PdfPage;","import React from 'react';\n\nconst HomePage = ()=>{\n    return(<div> Home Page</div>)\n}\n\nexport default HomePage;","import React from 'react';\nimport { Switch, Route, Link } from 'react-router-dom';\nimport PdfPage from './pages/pdfPage';\nimport HomePage from './pages/homePage';\nimport axios from 'axios';\nimport { getBlobData } from './utils';\n\nconst instance = axios.create({\n  baseURL: '',\n  timeout: 1000,\n  headers: { 'X-Custom-Header': 'foobar' }\n})\n\nfunction App() {\n\n  const downloadZip = () => {\n    alert('zip downloading');\n    instance.get('/zipfile/test.zip', { responseType: 'arraybuffer' })\n      .then(function (response) {\n        // handle success\n        console.log(response);\n        const pdfData = response.data;\n        console.log(pdfData);\n\n        const blob = new Blob([pdfData], { type: 'application/zip' });\n        //const blob = getBlobData(pdfData,'application/zip');\n        const fileName = 'samplefile'\n        //TODO fallback needed for IE8 & IE9\n        if (navigator.appVersion.toString().indexOf('.NET') > 0) {\n          //IE 10+\n          window.navigator.msSaveBlob(blob, fileName);\n        } else {\n          //Firefox, Chrome\n          var a = document.createElement(\"a\");\n          var blobUrl = window.URL.createObjectURL(blob);\n          document.body.appendChild(a);\n          a.style = \"display: none\";\n          a.href = blobUrl;\n          a.download = fileName;\n          a.click();\n        }\n\n\n\n      })\n      .catch(function (error) {\n        // handle error\n        console.log(error);\n      })\n      .finally(function () {\n        // always executed\n      });\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\" style={{ display: 'flex', height: '70px', background: 'yellow', position: 'fixed', top: '0' }}>\n        <ul style={{\n          display: 'flex',\n          listStyleType: 'none'\n        }}>\n          <li style={{\n            margin: 'auto 20px'\n          }}>\n            <Link\n              to={{\n                pathname: '/home',\n                state: { pageName: 'home page' }\n              }}>Home</Link>\n          </li>\n          <li style={{\n            margin: 'auto 20px'\n          }}>\n            <Link\n              to={{\n                pathname: '/pdf',\n                state: { pageName: 'pdfView' }\n              }}>Pdf</Link>\n          </li>\n          <li style={{\n            margin: 'auto 20px'\n          }}>\n            <button onClick={downloadZip}>Download Zip</button>\n          </li>\n        </ul>\n\n      </header>\n\n      <Switch>\n        <Route path=\"/home\" component={HomePage} />\n        <Route path=\"/pdf\" component={PdfPage} />\n      </Switch>\n\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter as Router} from 'react-router-dom'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router><App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}